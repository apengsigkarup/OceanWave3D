C[[[[[[DATE   09 MAR 1989     COPYRIGHT UKAEA, HARWELL.
C[[[[[[ALIAS MC23AD
C[[[[[[ CALLS   MC13    MC21
      SUBROUTINE MC23AD(N,ICN,A,LICN,LENR,IDISP,IP,IQ,LENOFF,IW,IW1)
C INPUT ... N,ICN .. A,ICN,LENR ....
C
C SET UP POINTERS IW(.,1) TO THE BEGINNING OF THE ROWS AND SET LENOFF
C     EQUAL TO LENR.
C     .. Scalar Arguments ..
      INTEGER LICN,N
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION A(LICN)
      INTEGER ICN(LICN),IDISP(2),IP(N),IQ(N),IW(N,5),IW1(N,2),LENOFF(N),
     +        LENR(N)
C     ..
C     .. Local Scalars ..
      INTEGER I,I1,I2,IBEG,IBLOCK,IEND,II,ILEND,INEW,IOLD,IROWB,IROWE,J,
     +        JJ,JNEW,JNPOS,JOLD,K,LENI,NZ
C     ..
C     .. External Subroutines ..
      EXTERNAL MC13D,MC21A,MC23CD
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC MAX0,MIN0
C     ..
C     .. Common blocks ..
      COMMON /MC23BD/LP,NUMNZ,NUM,LARGE,ABORT
      INTEGER LARGE,LP,NUM,NUMNZ
      LOGICAL ABORT
C     ..
      IW1(1,1) = 1
      LENOFF(1) = LENR(1)
      IF (N.EQ.1) GO TO 20
      DO 10 I = 2,N
         LENOFF(I) = LENR(I)
   10 IW1(I,1) = IW1(I-1,1) + LENR(I-1)
C IDISP(1) POINTS TO THE FIRST POSITION IN A/ICN AFTER THE
C     OFF-DIAGONAL BLOCKS AND UNTREATED ROWS.
   20 IDISP(1) = IW1(N,1) + LENR(N)
C
C FIND ROW PERMUTATION IP TO MAKE DIAGONAL ZERO-FREE.
      CALL MC21A(N,ICN,LICN,IW1,LENR,IP,NUMNZ,IW)
C
C POSSIBLE ERROR RETURN FOR STRUCTURALLY SINGULAR MATRICES.
      IF (NUMNZ.NE.N .AND. ABORT) GO TO 170
C
C IW1(.,2) AND LENR ARE PERMUTATIONS OF IW1(.,1) AND LENR/LENOFF
C     SUITABLE FOR ENTRY
C     TO MC13D SINCE MATRIX WITH THESE ROW POINTER AND LENGTH ARRAYS
C     HAS MAXIMUM NUMBER OF NON-ZEROS ON THE DIAGONAL.
      DO 30 II = 1,N
         I      = IP(II)
         IW1(II,2) = IW1(I,1)
   30 LENR(II) = LENOFF(I)
C
C FIND SYMMETRIC PERMUTATION IQ TO BLOCK LOWER TRIANGULAR FORM.
      CALL MC13D(N,ICN,LICN,IW1(1,2),LENR,IQ,IW(1,4),NUM,IW)
C
      IF (NUM.NE.1) GO TO 60
C
C ACTION TAKEN IF MATRIX IS IRREDUCIBLE.
C WHOLE MATRIX IS JUST MOVED TO THE END OF THE STORAGE.
      DO 40 I = 1,N
         LENR(I) = LENOFF(I)
         IP(I)  = I
   40 IQ(I)  = I
      LENOFF(1) = -1
C IDISP(1) IS THE FIRST POSITION AFTER THE LAST ELEMENT IN THE
C     OFF-DIAGONAL BLOCKS AND UNTREATED ROWS.
      NZ     = IDISP(1) - 1
      IDISP(1) = 1
C IDISP(2) IS THE POSITION IN A/ICN OF THE FIRST ELEMENT IN THE
C     DIAGONAL BLOCKS.
      IDISP(2) = LICN - NZ + 1
      LARGE  = N
      IF (NZ.EQ.LICN) GO TO 230
      DO 50 K = 1,NZ
         J      = NZ - K + 1
         JJ     = LICN - K + 1
         A(JJ)  = A(J)
   50 ICN(JJ) = ICN(J)
C 230 = RETURN
      GO TO 230
C
C DATA STRUCTURE REORDERED.
C
C FORM COMPOSITE ROW PERMUTATION ... IP(I) = IP(IQ(I)).
   60 DO 70 II = 1,N
         I      = IQ(II)
   70 IW(II,1) = IP(I)
      DO 80 I = 1,N
   80 IP(I)  = IW(I,1)
C
C RUN THROUGH BLOCKS IN REVERSE ORDER SEPARATING DIAGONAL BLOCKS
C     WHICH ARE MOVED TO THE END OF THE STORAGE.  ELEMENTS IN
C     OFF-DIAGONAL BLOCKS ARE LEFT IN PLACE UNLESS A COMPRESS IS
C     NECESSARY.
C
C IBEG INDICATES THE LOWEST VALUE OF J FOR WHICH ICN(J) HAS BEEN
C     SET TO ZERO WHEN ELEMENT IN POSITION J WAS MOVED TO THE
C     DIAGONAL BLOCK PART OF STORAGE.
      IBEG   = LICN + 1
C IEND IS THE POSITION OF THE FIRST ELEMENT OF THOSE TREATED ROWS
C     WHICH ARE IN DIAGONAL BLOCKS.
      IEND   = LICN + 1
C LARGE IS THE DIMENSION OF THE LARGEST BLOCK ENCOUNTERED SO FAR.
      LARGE  = 0
C
C NUM IS THE NUMBER OF DIAGONAL BLOCKS.
      DO 150 K = 1,NUM
         IBLOCK = NUM - K + 1
C I1 IS FIRST ROW (IN PERMUTED FORM) OF BLOCK IBLOCK.
C I2 IS LAST ROW (IN PERMUTED FORM) OF BLOCK IBLOCK.
         I1     = IW(IBLOCK,4)
         I2     = N
         IF (K.NE.1) I2     = IW(IBLOCK+1,4) - 1
         LARGE  = MAX0(LARGE,I2-I1+1)
C GO THROUGH THE ROWS OF BLOCK IBLOCK IN THE REVERSE ORDER.
         DO 140 II = I1,I2
            INEW   = I2 - II + I1
C WE NOW DEAL WITH ROW INEW IN PERMUTED FORM (ROW IOLD IN ORIGINAL
C     MATRIX).
            IOLD   = IP(INEW)
C IF THERE IS SPACE TO MOVE UP DIAGONAL BLOCK PORTION OF ROW GO TO 110
            IF (IEND-IDISP(1).GE.LENOFF(IOLD)) GO TO 110
C
C IN-LINE COMPRESS.
C MOVES SEPARATED OFF-DIAGONAL ELEMENTS AND UNTREATED ROWS TO
C     FRONT OF STORAGE.
            JNPOS  = IBEG
            ILEND  = IDISP(1) - 1
            IF (ILEND.LT.IBEG) GO TO 190
            DO 90 J = IBEG,ILEND
               IF (ICN(J).EQ.0) GO TO 90
               ICN(JNPOS) = ICN(J)
               A(JNPOS) = A(J)
               JNPOS  = JNPOS + 1
   90       CONTINUE
            IDISP(1) = JNPOS
            IF (IEND-JNPOS.LT.LENOFF(IOLD)) GO TO 190
            IBEG   = LICN + 1
C RESET POINTERS TO THE BEGINNING OF THE ROWS.
            DO 100 I = 2,N
  100       IW1(I,1) = IW1(I-1,1) + LENOFF(I-1)
C
C ROW IOLD IS NOW SPLIT INTO DIAG. AND OFF-DIAG. PARTS.
  110       IROWB  = IW1(IOLD,1)
            LENI   = 0
            IROWE  = IROWB + LENOFF(IOLD) - 1
C BACKWARD SCAN OF WHOLE OF ROW IOLD (IN ORIGINAL MATRIX).
            IF (IROWE.LT.IROWB) GO TO 130
            DO 120 JJ = IROWB,IROWE
               J      = IROWE - JJ + IROWB
               JOLD   = ICN(J)
C IW(.,2) HOLDS THE INVERSE PERMUTATION TO IQ.
C     ..... IT WAS SET TO THIS IN MC13D.
               JNEW   = IW(JOLD,2)
C IF (JNEW.LT.I1) THEN ....
C ELEMENT IS IN OFF-DIAGONAL BLOCK AND SO IS LEFT IN SITU.
               IF (JNEW.LT.I1) GO TO 120
C ELEMENT IS IN DIAGONAL BLOCK AND IS MOVED TO THE END OF THE STORAGE.
               IEND   = IEND - 1
               A(IEND) = A(J)
               ICN(IEND) = JNEW
               IBEG   = MIN0(IBEG,J)
               ICN(J) = 0
               LENI   = LENI + 1
  120       CONTINUE
C
            LENOFF(IOLD) = LENOFF(IOLD) - LENI
  130       LENR(INEW) = LENI
  140    CONTINUE
C
         IP(I2) = -IP(I2)
  150 CONTINUE
C RESETS IP(N) TO POSITIVE VALUE.
      IP(N)  = -IP(N)
C IDISP(2) IS POSITION OF FIRST ELEMENT IN DIAGONAL BLOCKS.
      IDISP(2) = IEND
C
C THIS COMPRESS IS USED TO MOVE ALL OFF-DIAGONAL ELEMENTS TO THE
C     FRONT OF THE STORAGE.
      IF (IBEG.GT.LICN) GO TO 230
      JNPOS  = IBEG
      ILEND  = IDISP(1) - 1
      DO 160 J = IBEG,ILEND
         IF (ICN(J).EQ.0) GO TO 160
         ICN(JNPOS) = ICN(J)
         A(JNPOS) = A(J)
         JNPOS  = JNPOS + 1
  160 CONTINUE
C IDISP(1) IS FIRST POSITION AFTER LAST ELEMENT OF OFF-DIAGONAL BLOCKS.
      IDISP(1) = JNPOS
      GO TO 230
C
C
C ERROR RETURN
  170 IF (LP.NE.0) WRITE (LP,FMT=180) NUMNZ

  180 FORMAT (/,' ERROR RETURN FROM MC23A  BECAUSE',/,10X,
     +       ' MATRIX IS STRUCTURALLY SINGULAR, RANK = ',I6)

      IDISP(1) = -1
      GO TO 230

  190 IF (LP.NE.0) WRITE (LP,FMT=200) N

  200 FORMAT (/,' ERROR RETURN FROM MC23A  BECAUSE',/,10X,
     +       ' LICN NOT BIG ENOUGH INCREASE BY ',I6)

      IDISP(1) = -2
C
  230 RETURN

      END
      BLOCK DATA MC23CD
C     .. Common blocks ..
      COMMON /MC23BD/LP,NUMNZ,NUM,LARGE,ABORT
      INTEGER LARGE,LP,NUM,NUMNZ
      LOGICAL ABORT
C     ..
C     .. Data statements ..
      DATA  LP/6/,ABORT/.FALSE./
C     ..
      END
